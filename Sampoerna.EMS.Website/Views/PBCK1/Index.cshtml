@using Sampoerna.EMS.Website.Helpers
@model Sampoerna.EMS.Website.Models.PBCK1.PBCK1ViewModel

@section styles
{
    <link rel="stylesheet" type="text/css" href="~/Scripts/DataTables-1.10.7/media/css/jquery.dataTables.css">
    
}

@{
    ViewBag.Title = "PBCK 1";
}

<div class="container-wrap title-page">
    <div class="row">
        <div class="col-sm-12">
            <h3>@ViewBag.Title</h3>
            <div class="action-button new">
                <a href="@Url.Action("Create", "PBCK1")">
                    <button class="btn btn-blue">NEW</button>
                </a>
            </div>
        </div>
    </div>
</div>

<div class="container-wrap">
    <div class="row">
        <div class="col-sm-12">
            <div class="white-wrapper">
                @using (Ajax.BeginForm("Filter", "PBCK1",
                new AjaxOptions
                {
                    HttpMethod = "POST",
                    InsertionMode = InsertionMode.Replace,
                    UpdateTargetId = "contenttable",
                    OnComplete = "ReloadDataTables"
                }, new { @class = "form-excise", role = "form" }))
                {
                    <div class="row">
                        <div class="col-md-4">
                            <div class="row">
                                <label class="col-md-4">NPPBKC ID</label>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.SearchInput.NPBCKID, Model.SearchInput.NPPBKCIDList, "All", new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="row">
                                <label class="col-md-4">Type</label>
                                <div class="col-md-8">
                                    @Html.EnumDropDownListFor(model => model.SearchInput.Pbck1Type, Model.SearchInput.PBCK1Types, null, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="row">
                                <label class="col-md-4">Year</label>
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.SearchInput.Year, Model.SearchInput.YearList, "All", new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="last-form">
                            <div class="col-md-4">
                                <div class="row">
                                    <label class="col-md-4">POA</label>
                                    <div id="divPoaList" class="col-md-8 ui-widget">
                                        <select id="SearchInput_POA" name="SearchInput.POA" class="form-control">
                                            <option value="">All</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="row">
                                    <label class="col-md-4">Creator</label>
                                    <div class="col-md-8">
                                        @Html.DropDownListFor(model => model.SearchInput.Creator, Model.SearchInput.CreatorList, "All", new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">

                                <input type="submit" class="btn btn-blue full" value="FILTER" />

                            </div>
                        </div>
                    </div>
                }
                <div id="contenttable" class="table-container">
                    @Html.Partial("Pbck1TablePartial")
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
    <script type="text/javascript" language="javascript" src="~/Scripts/DataTables-1.10.7/media/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" language="javascript" src="~/Scripts/DataTables-1.10.7/media/js/jquery.dataTables.js"></script>
    <script type="text/javascript" language="javascript" src="~/Scripts/DataTables-1.10.7/media/js/input.js"></script>
    <script type="text/javascript" language="javascript">
        function setupDataTables() {

            // DataTable
            var table = null;
            if ($.fn.dataTable.isDataTable('#pbckTable')) {
                table = $('#pbckTable').DataTable();
                table.destroy();
            }

            table = $('#pbckTable').DataTable(
                {
                    "sDom": "Rlfrtip",
                    "lengthMenu": [[1, 2, 3, -1], [1, 2, 3, "All"]],
                    "language": {
                        "lengthMenu": "Display _MENU_ records per page",
                        "zeroRecords": "No records found",
                        "info": "Showing page _PAGE_ of _PAGES_",
                        "infoFiltered": "(filtered from _MAX_ total records)"
                    }
                });

            // Setup - add a text input to each footer cell
            $('#pbckTable .filters th').each(function () {
                var idx = $(this).index();
                if (idx != 0 && idx != 1) {
                    var title = $('#pbckTable thead th').eq($(this).index()).text();
                    $(this).html('<input type="text" placeholder="Search" />');
                }
            });

            // Apply the search
            table.columns().eq(0).each(function (colIdx) {
                $('input', $('.filters th')[colIdx]).on('keyup change', function () {
                    table
                        .column(colIdx)
                        .search(this.value)
                        .draw();
                });
            });

            $("#pbckTable_filter").hide();
        }

        $("#SearchInput_NPBCKID").change(function () {
            if ($("#SearchInput_NPBCKID").length) {
                var nbck = $(this).find("option:selected").val();
                $('#SearchInput_POA option').remove();
                console.log(nbck);
                if (nbck == '') {
                    $('#SearchInput_POA').append('<option value="">All</option>');
                } else {
                    ajaxSelectNppbck('@Url.Action("PoaListPartial", "PBCK1")', { nppbkcId: nbck });
                }
            }

        });

        $(document).ready(function () {
            setupDataTables();
        });

        function ajaxSelectNppbck(url, formData) {
            if (formData.nppbkcId) {
                $.ajax({
                    type: 'POST',
                    url: url,
                    data: formData,
                    success: function (data) {
                        var list = data.SearchInput.POAList;
                        if (list.length > 0) {
                            $('#SearchInput_POA').append('<option value="">All</option>');
                            for (var i = 0; i < list.length; i++) {
                                $('#SearchInput_POA').append('<option value=' + list[i].Value + '>' + list[i].Text + '</option>');
                            }
                        }
                    }
                });
            }
        }

        function ReloadDataTables() {
            setupDataTables();
        }
        
    </script>
    
    <script>
        (function ($) {
            $.widget("custom.combobox", {
                _create: function () {
                    this.wrapper = $("<span>")
                        .addClass("custom-combobox")
                        .insertAfter(this.element);

                    this.element.hide();
                    this._createAutocomplete();
                    this._createShowAllButton();
                },

                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                        value = selected.val() ? selected.text() : "";

                    this.input = $("<input>")
                        .appendTo(this.wrapper)
                        .val(value)
                        .attr("title", "")
                        .addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                        .autocomplete({
                            delay: 0,
                            minLength: 0,
                            source: $.proxy(this, "_source")
                        })
                        .tooltip({
                            tooltipClass: "ui-state-highlight"
                        });

                    this._on(this.input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },

                        autocompletechange: "_removeIfInvalid"
                    });
                },

                _createShowAllButton: function () {
                    var input = this.input,
                        wasOpen = false;

                    $("<a>")
                        .attr("tabIndex", -1)
                        .attr("title", "Show All Items")
                        .tooltip()
                        .appendTo(this.wrapper)
                        .button({
                            icons: {
                                primary: "ui-icon-triangle-1-s"
                            },
                            text: false
                        })
                        .removeClass("ui-corner-all")
                        .addClass("custom-combobox-toggle ui-corner-right")
                        .mousedown(function () {
                            wasOpen = input.autocomplete("widget").is(":visible");
                        })
                        .click(function () {
                            input.focus();

                            // Close if already visible
                            if (wasOpen) {
                                return;
                            }

                            // Pass empty string as value to search for, displaying all results
                            input.autocomplete("search", "");
                        });
                },

                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },

                _removeIfInvalid: function (event, ui) {

                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }

                    // Search for a match (case-insensitive)
                    var value = this.input.val(),
                        valueLowerCase = value.toLowerCase(),
                        valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });

                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }

                    // Remove invalid value
                    this.input
                        .val("")
                        .attr("title", value + " didn't match any item")
                        .tooltip("open");
                    this.element.val("");
                    this._delay(function () {
                        this.input.tooltip("close").attr("title", "");
                    }, 2500);
                    this.input.autocomplete("instance").term = "";
                },

                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                }
            });
        })(jQuery);

        $(function () {
            $("#SearchInput_POA").combobox();
            //$("#toggle").click(function () {
            //    $("#SearchInput_POA").toggle();
            //});
        });
    </script>

}
